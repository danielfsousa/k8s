version: 2

references:
  restore_cache: &restore_cache
    restore_cache:
      keys:
        - v1-dependencies-{{ checksum "package.json" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-
  save_cache: &save_cache
    save_cache:
      paths:
        - node_modules
      key: v1-dependencies-{{ checksum "package.json" }}
  initialize_env: &initialize_env
    run:
      name: Set Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export ROK8S_INSTALL_PATH=${HOME}' >> ${BASH_ENV}
        echo 'export GCLOUDSDK_CONTAINER_USE_V1_CLIENT="false"' >> ${BASH_ENV}
        echo 'export GOOGLE_APPLICATION_CREDENTIALS="${ROK8S_TMP:-${HOME}}/gcloud-service-key.json"' >> ${BASH_ENV}
        echo 'export GCP_REGIONAL_CLUSTER="true"' >> ${BASH_ENV}
        echo 'export GCP_REGION="us-central1"' >> ${BASH_ENV}
  initialize_dev: &initialize_dev
    run:
      name: Set Development Environment Variables
      command: |
        echo 'export DATABASE_URI=$DATABASE_URI_DEV' >> ${BASH_ENV}
        echo 'export GCP_PROJECT=$GCLOUD_PROJECT_DEV' >> ${BASH_ENV}
        echo 'export CLUSTER_NAME=$GCLOUD_CLUSTER_DEV' >> ${BASH_ENV}
        echo 'export GCLOUD_KEY=$GCLOUD_KEY_DEV' >> ${BASH_ENV}
        echo 'export ROK8S_CONFIG="deploy/config/development.config"' >> ${BASH_ENV}
  initialize_staging: &initialize_staging
    run:
      name: Set Staging Environment Variables
      command: |
        echo 'export DATABASE_URI=$DATABASE_URI_STAGING' >> ${BASH_ENV}
        echo 'export GCP_PROJECT=$GCLOUD_PROJECT_STAGING' >> ${BASH_ENV}
        echo 'export CLUSTER_NAME=$GCLOUD_CLUSTER_STAGING' >> ${BASH_ENV}
        echo 'export GCLOUD_KEY=$GCLOUD_KEY_STAGING' >> ${BASH_ENV}
        echo 'export ROK8S_CONFIG="deploy/config/staging.config"' >> ${BASH_ENV}
  initialize_prod: &initialize_prod
    run:
      name: Set Production Environment Variables
      command: |
        echo 'export DATABASE_URI=$DATABASE_URI_PROD' >> ${BASH_ENV}
        echo 'export GCP_PROJECT=$GCLOUD_PROJECT_PROD' >> ${BASH_ENV}
        echo 'export CLUSTER_NAME=$GCLOUD_CLUSTER_PROD' >> ${BASH_ENV}
        echo 'export GCLOUD_KEY=$GCLOUD_KEY_PROD' >> ${BASH_ENV}
        echo 'export ROK8S_CONFIG="deploy/config/production.config"' >> ${BASH_ENV}
  migration_steps: &migration_steps
    docker:
      - image: circleci/node:10.14.0
    steps:
      - checkout
      - *restore_cache
      - run: npm install
      - *save_cache
      - run: npm run migrate
  deploy_steps: &deploy_steps
    docker:
      - image: quay.io/reactiveops/ci-images:v7-alpine
    steps:
      - checkout
      - *initialize_env
      - run: helm-deploy -f ${ROK8S_CONFIG}
  development_filters: &development_filters
    filters:
      branches:
        only:
          - develop
      tags:
        ignore: /.*/
  staging_filters: &staging_filters
    filters:
      branches:
        only:
          - master
      tags:
        ignore: /.*/
  production_filters: &production_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /\d+\.\d+\.\d+$/

jobs:
  test:
    docker:
      - image: circleci/node:10.14.0
      - image: redis
    steps:
      - checkout
      - *restore_cache
      - run: npm install
      - *save_cache
      - run: npm run lint
      - run: npm run migrate TEST_DATABASE
      - run: npm test
  image_build:
    docker:
      - image: quay.io/reactiveops/ci-images:v7-alpine
    steps:
      - checkout
      - setup_remote_docker
      - *initialize_env
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-pull -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-build -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-push -f ${ROK8S_CONFIG}"
    environment:
      ROK8S_CONFIG: deploy/config/build.config
  migrate_development:
    steps:
      - *initialize_dev
    <<: *migration_steps
  migrate_staging:
    steps:
      - *initialize_staging
    <<: *migration_steps
  migrate_production:
    steps:
      - *initialize_prod
      - prepare-gcloud
    <<: *migration_steps
  deploy_development:
    steps:
      - *initialize_dev
      - prepare-gcloud
    <<: *deploy_steps
  deploy_staging:
    steps:
      - *initialize_staging
      - prepare-gcloud
    <<: *deploy_steps
  deploy_production:
    steps:
      - *initialize_prod
    <<: *deploy_steps

workflows:
  version: 2
  build_test_migrate_release:
    jobs:
      - test
      - image_build:
          requires:
            - test
          filters:
            tags:
              ignore: /.*/
      - migrate_development:
          <<: *development_filters
          requires:
            - test
      - migrate_staging:
          <<: *staging_filters
          requires:
            - test
      - migrate_production:
          <<: *production_filters
          requires:
            - test
      - deploy_development:
          <<: *development_filters
          requires:
            - migrate_development
      - deploy_staging:
          <<: *staging_filters
          requires:
            - migrate_staging
      - deploy_production:
          <<: *production_filters
          requires:
            - migrate_production