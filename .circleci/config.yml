version: 2

references:
  restore_cache: &restore_cache
    restore_cache:
      keys:
        - v1-dependencies-{{ checksum "package.json" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-
  save_cache: &save_cache
    save_cache:
      paths:
        - node_modules
      key: v1-dependencies-{{ checksum "package.json" }}
  set_environment_variables: &set_environment_variables
    run:
      name: Set Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export ROK8S_INSTALL_PATH=${HOME}' >> ${BASH_ENV}
        echo "export KUBECONFIG_DATA=\$$KUBECONFIG_DATA" >> ${BASH_ENV}
  migration_steps: &migration_steps
    docker:
      - image: circleci/node:10.14.0
    steps:
      - checkout
      - *restore_cache
      - run: npm install
      - *save_cache
      - run: npm run migrate
  deploy_steps: &deploy_steps
    docker:
      - image: quay.io/reactiveops/ci-images:v7-alpine
    steps:
      - checkout
      - *set_environment_variables
      - run: prepare-kubectl
      - run: k8s-deploy-and-verify -f ${ROK8S_CONFIG}
  development_filters: &development_filters
    filters:
      branches:
        only:
          - develop
      tags:
        ignore: /.*/
  staging_filters: &staging_filters
    filters:
      branches:
        only:
          - master
      tags:
        ignore: /.*/
  production_filters: &production_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /\d+\.\d+\.\d+$/

jobs:
  test:
    docker:
      - image: circleci/node:10.14.0
      - image: redis
    steps:
      - checkout
      - *restore_cache
      - run: npm install
      - *save_cache
      - run: npm run lint
      - run: npm run migrate
      - run: npm test
  image_build:
    docker:
      - image: quay.io/reactiveops/ci-images:v7-alpine
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-pull -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-build -f ${ROK8S_CONFIG}"
      - run: "[[ -n ${ROK8S_NO_BUILD} ]] || docker-push -f ${ROK8S_CONFIG}"
    environment:
      ROK8S_CONFIG: deploy/config/staging.config
  migrate_development:
    <<: *migration_steps
    environment:
      DATABASE_URI: DEVELOPMENT_DATABASE
  migrate_staging:
    <<: *migration_steps
    environment:
      DATABASE_URI: STAGING_DATABASE
  migrate_production:
    <<: *migration_steps
    environment:
      DATABASE_URI: PRODUCTION_DATABASE
  deploy_development:
    <<: *deploy_steps
    environment:
      ENV: DEVELOPMENT
      ROK8S_CONFIG: deploy/config/development.config
      KUBECONFIG_DATA: KUBECONFIG_DATA_DEVELOPMENT
  deploy_staging:
    <<: *deploy_steps
    environment:
      ENV: STAGING
      ROK8S_CONFIG: deploy/config/staging.config
      KUBECONFIG_DATA: KUBECONFIG_DATA_STAGING
  deploy_production:
    <<: *deploy_steps
    environment:
      ENV: PRODUCTION
      ROK8S_CONFIG: deploy/config/production.config
      KUBECONFIG_DATA: KUBECONFIG_DATA_PRODUCTION

workflows:
  version: 2
  build_test_migrate_release:
    jobs:
      - test
      - image_build:
          requires:
            - test
          filters:
            tags:
              ignore: /.*/
      - migrate_development:
          <<: *development_filters
          requires:
            - test
      - migrate_staging:
          <<: *staging_filters
          requires:
            - test
      - migrate_production:
          <<: *production_filters
          requires:
            - test
      - deploy_development:
          <<: *development_filters
          requires:
            - migrate_development
      - deploy_staging:
          <<: *staging_filters
          requires:
            - migrate_staging
      - deploy_production:
          <<: *production_filters
          requires:
            - migrate_production